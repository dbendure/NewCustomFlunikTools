city (){//not sure if this would work
	for(var nCity in ClientLib.Data.MainData.GetInstance().get_Cities().get_AllCities().d){
		var city = ClientLib.Data.MainData.GetInstance().get_Cities().get_AllCities().d[nCity];
		return city;
	}
}

building(){//not sure if this would work
	var buildings = this.city.get_Buildings();
	for (var nBuildings in buildings.d) {
		var building = buildings.d[nBuildings];
		return building;
	}
}

Mod_And_Link_Type(building_ID, modType, linkType){//not 100% on if this idea would work, we may need a separate function to do the math, or do the math in the for loop.
	if(modType !== null ){
		var Prodution = this.city.GetBuildingCache(building_ID).DetailViewInfo.OwnProdModifiers.d[modType].TotalValue;
		return Production;
	}
	if(linkType !== null ){
		var LinkType = this.city.GetBuildingCache(building_ID).DetailViewInfo.OwnProdModifiers.d[modType].ConnectedLinkTypes.d[linkType].Value;
		return LinkType;
	}

}

Production_Math(production, packages, package_per_hour, LinkType0, LinkType1, LinkType2){
	if(packages !== 0 &&  package_per_hour !== 0){//refineries, power plants, and harvesters
		var Total_Production = production + (packages/(package_per_hour/3600)) +  LinkType0 +  LinkType1 +  LinkType2 ;
	}else{//silos  and accumulators
		var Total_Production = production  +  LinkType0 +  LinkType1 +  LinkType2 ;
	}
	return Total_Production;
}

Prodution_Of_A_Level_12(a){
	if(a == "ref"){var pro_of_12 = 605 + (7260/6) + 484 + 605;}
	if(a == "p_p"){var pro_of_12 = 605 + (7260/6) + 570 + 456 + 484;}
	if(a == "har"){var pro_of_12 = 570 + (7260/6) + 380;}
	if(a == "sil"){var pro_of_12 = 380 + 380; }
	if(a == "acc"){var pro_of_12 = 456;}
	return pro_of_12;


}

upgradeBuilding(obj){
	if(obj = unit_obj){
		var upgrade = ClientLib.Net.CommunicationManager.GetInstance().SendCommand("UnitUpgrade", obj, null, null, true);
	}else{
		var upgrade = ClientLib.Net.CommunicationManager.GetInstance().SendCommand("UpgradeBuilding", building_obj, null, null, true);
	}
	return 	upgrade;
}

BuildingautoUpgrade() {
	var EModifierType = ClientLib.Base.EModifierType;
	var ELinkType = ClientLib.Base.ELinkType;
    foreach (this.city) { //here you could use "this.city[city_id]" since city_id is really what nCity is. 
        foreach (this.building) {//here you could use "this.building[building_id]" since building_id is really what nBuildings is.
            switch (tech) {
            case Factory:
            case Barracks:
            case Airport:
                // Is this building's RT the highest RT?
                break;
            case ConstructionYard:
            case CommandCenter:
            case DefenseFacility:
            case DeenseHQ:
            case Support_Air:
            case Support_Ion:
            case Support_Art:
                // What is this building's target level?
                //  CY >= baseLevel
                //  CC >= offenseLevel
                //  DF >= defenseLevel + 3
                //  DHQ >= defenseLevel
                //  Support_Air >= defenseLevel + 3
                //  Support_Ion >= defenseLevel + 3
                //  Support_Art >= defenseLevel + 3
                break;
            case Refinery: // TODO: Can all these production buildings be combined into a single set of logic?
                var a = "ref";
				if (building_level <= 2) {
                    // upgrade it
                } else {
                    // Complicated_logic: 
					//	
					//Mod_And_Link_Type(building_ID, modType, linkType) ---- var packages = Mod_And_Link_Type(building_ID, EModifierType.CreditsPackageSize, null) ------ var linktypes = Mod_And_Link_Type(building_ID, EModifierType.CreditsProduction, ELinkType.PowerplantCreditBonus)
					//Production_Math(production, packages, package_per_hour, LinkType0, LinkType1, LinkType2) ------ var prodution_total = Production_Math(production, packages, package_per_hour, LinkType0, LinkType1, 0);
					//var level12_Prodution = Prodution_Of_A_Level_12(a);
					//var prodution_ratio =(prodution_total/Cost)/(level12_Prodution/Cost_of_level_12);
					//^^^^prodution_ratio : Needs to be the comparing number. The production building with the highest number wins the upgrade. if the repair time is below the said limit.^^^^
				}
                break;
            case Harvester:
				var a == "har"
                if (building_level <= 2) {
                    // upgrade it
                } else {
                    // Complicated_logic(building_ID, modType, linkType)
                }
                break;
            case PowerPlant:
				var a == "p_p"
                if (building_level <= 2) {
                    // upgrade it
                } else {
                    // Complicated_logic(building_ID, modType, linkType)
                }
                break;
            }
        }

        var obj = null;
        if (offense_obj != null) {
            obj = offense_obj;
        } else if (city_obj != null) {
            obj = city_obj;
        } else if (production_obj != null) {
            obj = production_obj;
        }

        if (obj != null) {
            upgradeBuilding(obj);
        }
    }
}
